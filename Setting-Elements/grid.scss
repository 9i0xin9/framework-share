
   // display: flex
   // flex-direction: row | row-reverse | column | column-reverse
   // flex-wrap: nowrap | wrap | wrap-reverse
   // flex: flex-grow | flex-shrink | flex-basis (Add min-height direction:column or min-width direction:row and height and width for old boxes)
   // align-items: flex-start | flex-end | center | baseline | stretch
   // justify-content: flex-start | flex-end | center | space-between | space-around

   @import 'general-settings.scss';

   /*** GRID SETTINGS ***/

   .row {
     overflow: hidden;
     word-break: break-all;
     display: flex;
     flex-direction: row;
     flex-wrap: wrap;
     align-items: stretch
   }

   .row div {
     overflow: inherit;
     display: inherit;
     flex-direction: row;
     flex-wrap: wrap;
     align-items: stretch;
     justify-content: center;
     flex: 1 1 0%;
     width: auto;
     max-width: auto;
   }

   .row div > * {
     align-items: center;
   }


   /***  DIMENSION SECTION  ***/

   @for $i from 1 through 6{
      .row .r-#{$i} {
          flex: #{$i} 1 0;
      }
   }
   .full div,
   .row .full {
   flex: 0 0 100%;
   width: 100%;
   }
   .fit div,
   .row .fit {
   flex: 0 0 auto;
   width: auto;
   }

   @if variable-exists(media-queries-list) {
       $media-queries-first: nth($media-queries-list, 1);
       $media-queries-last: nth($media-queries-list, length($media-queries-list));
       // compile the xs set
       // set later an if is the xs is selected from the general file
       @each $n in $media-queries-list {
           @if $n == nth($media-queries-list,1){
           @media screen and (max-width: nth($media-queries-first, 2)-1px) {
                @for $i from 1 through 6{
                   .row .xs-#{$i} {
                       flex: #{$i} 1 0;
                   }
               }
               .xs-full div,
               .row .xs-full {
               flex: 0 0 100%;
               width: 100%;
               }
               .xs-fit div,
               .row .xs-fit {
               flex: 0 0 auto;
               width: auto;
               }
           }
           }
           //
           @if $n != $media-queries-last {
                $media-queries-next: nth($media-queries-list, index($media-queries-list,$n)+1);
                @media screen and (min-width: nth($n, 2)) and (max-width: nth($media-queries-next, 2)-1px){
                   @for $i from 1 through 6 {
                       .row .#{nth($n, 1)}-#{$i} {
                           flex: #{$i} 1 0;
                       }
                   }
                   .#{nth($n, 1)}-full div,
                   .row .#{nth($n, 1)}-full {
                    flex: 0 0 100%;
                    width: 100%;
                   }
                   .#{nth($n, 1)}-fit div,
                   .row .#{nth($n, 1)}-fit {
                    flex: 0 0 auto;
                    width: auto;
                   }
               }
           }
           //
           @else {
                @media screen and (min-width: nth($media-queries-last, 2)){
                   @for $i from 1 through 6 {
                       .row .#{nth($n, 1)}-#{$i} {
                           flex: #{$i} 1 0;
                       }
                   }
                   .#{nth($n, 1)}-full div,
                   .row .#{nth($n, 1)}-full {
                    flex: 0 0 100%;
                    width: 100%;
                   }
                   .#{nth($n, 1)}-fit div,
                   .row .#{nth($n, 1)}-fit {
                    flex: 0 0 auto;
                    width: auto;
                   }
               }
           }
       }
   }
